"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[229],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>v});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=i,v=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(v,a(a({ref:n},p),{},{components:t})):r.createElement(v,a({ref:n},p))}));function v(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6840:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(7462),i=(t(7294),t(3905));const o={},a=void 0,l={unversionedId:"Sample App",id:"Sample App",title:"Sample App",description:"To understand the connection flow and behaviors of the library, you can play around, debug, and run the sample SwiftUI App that you can customize to connect to any broker that you want.",source:"@site/docs/Sample App.md",sourceDirName:".",slug:"/Sample App",permalink:"/courier-iOS/docs/Sample App",draft:!1,editUrl:"https://github.com/gojek/courier-iOS/edit/main/docs/docs/Sample App.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/courier-iOS/docs/Installation"},next:{title:"Setup Connection",permalink:"/courier-iOS/docs/Setup Connection"}},c={},s=[{value:"Features",id:"features",level:2},{value:"Steps",id:"steps",level:2},{value:"ConnectionServiceProvider",id:"connectionserviceprovider",level:2},{value:"Courier Client Configuration in CourierObservableObject",id:"courier-client-configuration-in-courierobservableobject",level:2}],p={toc:s},u="wrapper";function d(e){let{components:n,...o}=e;return(0,i.kt)(u,(0,r.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"To understand the connection flow and behaviors of the library, you can play around, debug, and run the sample SwiftUI App that you can customize to connect to any broker that you want."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image banner",src:t(3521).Z,width:"3352",height:"1872"})),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Configure connection (ip, port, clientid, username, password, ping, clean session)"),(0,i.kt)("li",{parentName:"ul"},"Subscribe/Unsubscribe to broker and visualize current subscriptions"),(0,i.kt)("li",{parentName:"ul"},"Publish message to broker"),(0,i.kt)("li",{parentName:"ul"},"Display received messages history")),(0,i.kt)("h2",{id:"steps"},"Steps"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Clone the project from ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/gojek/courier-iOS"},"GitHub")),(0,i.kt)("li",{parentName:"ul"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"pod install")),(0,i.kt)("li",{parentName:"ul"},"Open ",(0,i.kt)("inlineCode",{parentName:"li"},"Courier.xcworkspace")),(0,i.kt)("li",{parentName:"ul"},"Select ",(0,i.kt)("inlineCode",{parentName:"li"},"CourierE2EApp")," from the scheme.")),(0,i.kt)("h2",{id:"connectionserviceprovider"},"ConnectionServiceProvider"),(0,i.kt)("p",null,"The app provides ",(0,i.kt)("inlineCode",{parentName:"p"},"ConnectionServiceProvider")," that conforms to ",(0,i.kt)("inlineCode",{parentName:"p"},"IConnectionServiceProvider")," to provide connection options to Courier"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'class ConnectionServiceProvider: IConnectionServiceProvider {\n    \n    let ipAddress: String\n    let port: Int\n    \n    let clientId: String\n    let username: String?\n    let password: String?\n    \n    let isCleanSession: Bool\n    let pingInterval: Int\n    \n    var extraIdProvider: (() -> String?)? = nil\n    \n    init(ipAddress: String,\n        port: Int,\n        clientId: String,\n        username: String? = nil,\n        password: String? = nil,\n        isCleanSession: Bool,\n        pingInterval: Int) {\n        self.ipAddress = ipAddress\n        self.port = port\n        self.clientId = clientId\n        self.username = username\n        self.password = password\n        self.isCleanSession = isCleanSession\n        self.pingInterval = pingInterval\n    }\n    \n    func getConnectOptions(completion: @escaping (Result<ConnectOptions, AuthError>) -> Void) {\n        completion(.success(.init(\n            host: ipAddress,\n            port: UInt16(port),\n            keepAlive: UInt16(pingInterval),\n            clientId: clientId,\n            username: username ?? "",\n            password: password ?? "",\n            isCleanSession: isCleanSession\n        )))\n    }\n}\n')),(0,i.kt)("h2",{id:"courier-client-configuration-in-courierobservableobject"},"Courier Client Configuration in CourierObservableObject"),(0,i.kt)("p",null,"You can peek at how the client is created and configured inside ",(0,i.kt)("inlineCode",{parentName:"p"},"ConnectionObservableObject")," class."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"init(connectionserviceProvider: ConnectionServiceProvider) {\n    self.connectionServiceProvider = connectionserviceProvider\n    \n    // Configure & Initialize Courier\n    let clientFactory = CourierClientFactory()\n    self.courierClient = clientFactory.makeMQTTClient(\n        config: MQTTClientConfig(\n            authService: connectionserviceProvider,\n            messageAdapters: [\n                DataMessageAdapter(),\n                JSONMessageAdapter(),\n                TextMessageAdapter()\n                \n            ],\n            autoReconnectInterval: 1,\n            maxAutoReconnectInterval: 30,\n            connectTimeoutPolicy: ConnectTimeoutPolicy(isEnabled: true),\n            idleActivityTimeoutPolicy: IdleActivityTimeoutPolicy(isEnabled: true),\n            messagePersistenceTTLSeconds: 86400,\n            messageCleanupInterval: 10\n        )\n    )\n}\n")))}d.isMDXComponent=!0},3521:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/courier_e2e-caf6b5c9d4afd069365d413b8cb8e887.jpg"}}]);