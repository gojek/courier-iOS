"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[22],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),l=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=l(e.components);return o.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),d=l(t),m=r,v=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return t?o.createElement(v,c(c({ref:n},s),{},{components:t})):o.createElement(v,c({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,c=new Array(i);c[0]=d;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a.mdxType="string"==typeof e?e:r,c[1]=a;for(var l=2;l<i;l++)c[l]=t[l];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1856:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const i={},c=void 0,a={unversionedId:"Setup Connection",id:"Setup Connection",title:"Setup Connection",description:"Providing Connect Options",source:"@site/docs/Setup Connection.md",sourceDirName:".",slug:"/Setup Connection",permalink:"/courier-iOS/docs/Setup Connection",draft:!1,editUrl:"https://github.com/gojek/courier-iOS/edit/main/docs/docs/Setup Connection.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sample App",permalink:"/courier-iOS/docs/Sample App"},next:{title:"Configuring Client",permalink:"/courier-iOS/docs/Configuring Client"}},p={},l=[{value:"Providing Connect Options",id:"providing-connect-options",level:3},{value:"ConnectOptions Properties",id:"connectoptions-properties",level:2},{value:"Example of IConnectionServiceProvider Implementation",id:"example-of-iconnectionserviceprovider-implementation",level:2}],s={toc:l};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"providing-connect-options"},"Providing Connect Options"),(0,r.kt)("p",null,"To connect to MQTT broker you need to provide ",(0,r.kt)("inlineCode",{parentName:"p"},"ConnectOptions")," by implementing ",(0,r.kt)("inlineCode",{parentName:"p"},"IConnectionServiceProvider"),". First you need to implement ",(0,r.kt)("inlineCode",{parentName:"p"},"IConnectionServiceProvider/clientId")," to return an unique string to identify your client. This must be unique for each device that connect to broker."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"var clientId: String {\n    UIDevice.current.identifierForVendor?.uuidString ?? UUID().uuidString\n}\n")),(0,r.kt)("p",null,"Next, you need to implement ",(0,r.kt)("inlineCode",{parentName:"p"},"IConnectionServiceProvider/getConnectOptions(completion:)")," method. You need to provide ",(0,r.kt)("inlineCode",{parentName:"p"},"ConnectOptions")," instance that will be used to make connection to the broker. This method provides an escaping closure, in case you need to retrieve the credential from remote API asynchronously. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"func getConnectOptions(completion: @escaping (Result<ConnectOptions, AuthError>) -> Void) {\n    // Provide your own logic to retrieve connect options\n    // The completion is @escaping in case you want to retrieve the connect options from internet\n}\n")),(0,r.kt)("h2",{id:"connectoptions-properties"},"ConnectOptions Properties"),(0,r.kt)("p",null,"Here are the data that you need to provide in ConnectOptions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"/// IP Host address of the broker\npublic let host: String\n/// Port of the broker\npublic let port: UInt16\n/// Keep Alive interval used to ping the broker over time to maintain the long run connection\npublic let keepAlive: UInt16\n/// Unique Client ID used by broker to identify connected clients\npublic let clientId: String\n/// Username of the client\npublic let username: String\n/// Password of the client used for authentication by the broker\npublic let password: String\n/// Tells broker whether to clear the previous session by the clients\npublic let isCleanSession: Bool\n/// Include Optional user properties in Connect Packet\npublic let userProperties: [String: Any]?\n/// Include Optional ALPN array, (e.g if you use service like AWS IoT Core and TSL, you can pass the protocol)\npublic let alpn: [String]?\n")),(0,r.kt)("h2",{id:"example-of-iconnectionserviceprovider-implementation"},"Example of IConnectionServiceProvider Implementation"),(0,r.kt)("p",null,"You can take a look at this example that provides hardcoded ConnectOptions in ",(0,r.kt)("inlineCode",{parentName:"p"},"getConnectOptions(completion:")," method`."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'final class HiveMQAuthService: IConnectionServiceProvider {\n\n  var extraIdProvider: (() -> String?)?\n\n  var clientId: String {\n      let deviceId = UIDevice.current.identifierForVendor?.uuidString ?? UUID().uuidString\n      return "\\(deviceId)|\\(username)"\n  }\n\n  private let username = "123456"\n\n  func getConnectOptions(completion: @escaping (Result<ConnectOptions, AuthError>) -> Void) {\n      let connectOptions = ConnectOptions(\n          host: "broker.mqttdashboard.com",\n          port: 1883,\n          keepAlive: 60,\n          clientId: clientId,\n          username: username,\n          password: "",\n          isCleanSession: false\n      )\n\n      completion(.success(connectOptions))\n  }\n}\n')))}u.isMDXComponent=!0}}]);