"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[745],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),f=i,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||o;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5247:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const o={},a=void 0,l={unversionedId:"Configuring Client",id:"Configuring Client",title:"Configuring Client",description:"Configure and Create MQTT CourierClient Instance with CourierClientFactory",source:"@site/docs/Configuring Client.md",sourceDirName:".",slug:"/Configuring Client",permalink:"/courier-iOS/docs/Configuring Client",draft:!1,editUrl:"https://github.com/gojek/courier-iOS/edit/main/docs/docs/Configuring Client.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Setup Connection",permalink:"/courier-iOS/docs/Setup Connection"},next:{title:"Message Adapter",permalink:"/courier-iOS/docs/Message Adapter"}},c={},s=[{value:"Configure and Create MQTT CourierClient Instance with CourierClientFactory",id:"configure-and-create-mqtt-courierclient-instance-with-courierclientfactory",level:3}],u={toc:s},p="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"configure-and-create-mqtt-courierclient-instance-with-courierclientfactory"},"Configure and Create MQTT CourierClient Instance with CourierClientFactory"),(0,i.kt)("p",null,"Next, we need to create instance of CourierClient that uses MQTT as its implementation. Initialize ",(0,i.kt)("inlineCode",{parentName:"p"},"CourierClientFactory")," instance and invoke ",(0,i.kt)("inlineCode",{parentName:"p"},"CourierClientFactory/makeMQTTClient(config:)"),". We need to pass instance MQTTClientConfig with several parameters that we can customize. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"let clientFactory = CourierClientFactory()\nlet courierClient = clientFactory.makeMQTTClient(\n    config: MQTTClientConfig(\n        authService: HiveMQAuthService(),\n        messageAdapters: [\n            JSONMessageAdapter(),\n            ProtobufMessageAdapter()\n        ],\n        autoReconnectInterval: 1,\n        maxAutoReconnectInterval: 30\n    )\n)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MQTTClientConfig/messageAdapters"),": we need to pass array of ",(0,i.kt)("inlineCode",{parentName:"li"},"MessageAdapter"),". This will be used for serialization when receiving from broker and sending message to the broker. ",(0,i.kt)("inlineCode",{parentName:"li"},"CourierMQTT")," provides built in message adapters for JSON ",(0,i.kt)("inlineCode",{parentName:"li"},"(JSONMessageAdapter)")," and Plist ",(0,i.kt)("inlineCode",{parentName:"li"},"(PlistMessageAdapter)")," format that conforms to ",(0,i.kt)("inlineCode",{parentName:"li"},"Codable")," protocol. You can only use one of them because both implements to Codable to avoid any conflict. To use protobuf, please import ",(0,i.kt)("inlineCode",{parentName:"li"},"CourierProtobuf")," and pass ",(0,i.kt)("inlineCode",{parentName:"li"},"ProtobufMessageAdapter"),". You can read more about this in Message Adapter doc."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MQTTClientConfig/authService"),": we need to pass our implementation of IConnectionServiceProvider protocol for providing the ConnectOptions to the client."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MQTTClientConfig/autoReconnectInterval")," The interval used to make reconnection to broker in case of connection lost. This will be multiplied by 2 for each time until it successfully make the connection. The upper limit is based on ",(0,i.kt)("inlineCode",{parentName:"li"},"MQTTClientConfig/maxAutoReconnectInterval"),".")))}d.isMDXComponent=!0}}]);