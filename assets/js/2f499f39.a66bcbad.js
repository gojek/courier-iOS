"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[355],{5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>f});var r=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),g=i,f=p["".concat(c,".").concat(g)]||p[g]||d[g]||o;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=g;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},818:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(8168),i=(t(6540),t(5680));const o={},a=void 0,l={unversionedId:"Configuring Client",id:"Configuring Client",title:"Configuring Client",description:"Configure and Create MQTT CourierClient Instance with CourierClientFactory",source:"@site/docs/Configuring Client.md",sourceDirName:".",slug:"/Configuring Client",permalink:"/courier-iOS/docs/Configuring Client",draft:!1,editUrl:"https://github.com/gojek/courier-iOS/edit/main/docs/docs/Configuring Client.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Setup Connection",permalink:"/courier-iOS/docs/Setup Connection"},next:{title:"Message Adapter",permalink:"/courier-iOS/docs/Message Adapter"}},c={},s=[{value:"Configure and Create MQTT CourierClient Instance with CourierClientFactory",id:"configure-and-create-mqtt-courierclient-instance-with-courierclientfactory",level:3}],u={toc:s},p="wrapper";function d(e){let{components:n,...t}=e;return(0,i.yg)(p,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h3",{id:"configure-and-create-mqtt-courierclient-instance-with-courierclientfactory"},"Configure and Create MQTT CourierClient Instance with CourierClientFactory"),(0,i.yg)("p",null,"Next, we need to create instance of CourierClient that uses MQTT as its implementation. Initialize ",(0,i.yg)("inlineCode",{parentName:"p"},"CourierClientFactory")," instance and invoke ",(0,i.yg)("inlineCode",{parentName:"p"},"CourierClientFactory/makeMQTTClient(config:)"),". We need to pass instance MQTTClientConfig with several parameters that we can customize. "),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-swift"},"let clientFactory = CourierClientFactory()\nlet courierClient = clientFactory.makeMQTTClient(\n    config: MQTTClientConfig(\n        authService: HiveMQAuthService(),\n        messageAdapters: [\n            JSONMessageAdapter(),\n            ProtobufMessageAdapter()\n        ],\n        autoReconnectInterval: 1,\n        maxAutoReconnectInterval: 30\n    )\n)\n")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"MQTTClientConfig/messageAdapters"),": we need to pass array of ",(0,i.yg)("inlineCode",{parentName:"li"},"MessageAdapter"),". This will be used for serialization when receiving from broker and sending message to the broker. ",(0,i.yg)("inlineCode",{parentName:"li"},"CourierMQTT")," provides built in message adapters for JSON ",(0,i.yg)("inlineCode",{parentName:"li"},"(JSONMessageAdapter)")," and Plist ",(0,i.yg)("inlineCode",{parentName:"li"},"(PlistMessageAdapter)")," format that conforms to ",(0,i.yg)("inlineCode",{parentName:"li"},"Codable")," protocol. You can only use one of them because both implements to Codable to avoid any conflict. To use protobuf, please import ",(0,i.yg)("inlineCode",{parentName:"li"},"CourierProtobuf")," and pass ",(0,i.yg)("inlineCode",{parentName:"li"},"ProtobufMessageAdapter"),". You can read more about this in Message Adapter doc."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"MQTTClientConfig/authService"),": we need to pass our implementation of IConnectionServiceProvider protocol for providing the ConnectOptions to the client."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"MQTTClientConfig/autoReconnectInterval")," The interval used to make reconnection to broker in case of connection lost. This will be multiplied by 2 for each time until it successfully make the connection. The upper limit is based on ",(0,i.yg)("inlineCode",{parentName:"li"},"MQTTClientConfig/maxAutoReconnectInterval"),".")))}d.isMDXComponent=!0}}]);